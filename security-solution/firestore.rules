rules_version = '2';

// SOLUTION 4: Updated rules in this file to pass the tests in test/test.spec.js.

service cloud.firestore {
  match /databases/{database}/documents {
    // Returns true if the user is a listed as a member in Firestore
    function isChatroomMember(userId, chatroom) {
      return exists(/databases/(default)/documents/chatrooms/$(chatroom)/members/$(userId));
    }

    // Global admins can read/write everything
    match /{document=**} {
      allow read, write: if request.auth != null && request.auth.token != null && request.auth.token.globAdmin == true;
    }

    // Any signed in user can see the chat rooms and create a new one
    match /chatrooms/{chatroom} {
      allow read: if request.auth.uid != null;
      allow create: if request.resource.data.owner == request.auth.uid;

      // Only the room owner is allowed to modify it, and owner mustn't be able to assign their room to other user.
      allow update: if request.auth.uid != null && resource.data.owner == request.auth.uid && request.resource.data.owner == request.auth.uid;

      // Only the room owner can delete it
      allow delete: if request.auth.uid != null && resource.data.owner == request.auth.uid;
    }

    // Messages:
    //   - Chatroom members can read messages.
    //   - Writers can edit their own messages.
    //   - Validation: Check name is same as auth token and text length below 300 char or that imageUrl is a URL.
    //   - Deletes are not allowed.
    match /chatrooms/{chatroom}/messages/{messageId} {
      allow read: if request.auth != null && isChatroomMember(request.auth.uid, chatroom);
      allow create, update: if request.auth != null && isChatroomMember(request.auth.uid, chatroom)
                    && request.resource.data.name == request.auth.token.get('name', request.auth.token.email)
                    && (request.resource.data.text is string
                      && request.resource.data.text.size() <= 300
                      || request.resource.data.imageUrl is string
                      && request.resource.data.imageUrl.matches('https?://.*'));
      allow delete: if false;
    }

    // PublicRoom messages:
    //   - Any signed in user can read/write messages.
    match /chatrooms/publicRoom/messages/{messageId} {
      allow read, write: if request.auth != null;
    }

    // Members:
    //  - Chatroom members can see and modify members, except in privateRoom.
    //  - All signed in users and see and modify members in publicRoom.
    match /chatrooms/{chatroom}/members/{userId} {
      allow read, write: if request.auth != null && chatroom == 'publicRoom';
      allow read, write: if request.auth != null
                         && (request.auth.uid == userId || isChatroomMember(request.auth.uid, chatroom))
                         && (chatroom != 'privateRoom' || request.auth.token.email == "private@example.com");
    }
  }
}
